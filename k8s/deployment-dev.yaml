# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: ${CICD_GIT_REPO_NAME}-dev
  labels:
    app.kubernetes.io/name: dev
    app.kubernetes.io/instance: dev
---
# Service - gninx-service
apiVersion: v1
kind: Service
metadata:
  labels:
    run: www-dev
  name: www-service-dev
  namespace: ${CICD_GIT_REPO_NAME}-dev
spec:
  ports:
    - port: 80
      protocol: TCP
      targetPort: 8043
  selector:
    run: www-dev
  sessionAffinity: None
  type: ClusterIP
---
# Issuer - letsencrypt
apiVersion: cert-manager.io/v1alpha2
kind: Issuer
metadata:
  name: letsencrypt-dev
  namespace: ${CICD_GIT_REPO_NAME}-dev
spec:
  acme:
    # The ACME server URL
    server: https://acme-v02.api.letsencrypt.org/directory
    # Email address used for ACME registration
    email: soporte@binpar.com
    # Name of a secret used to store the ACME account private key
    privateKeySecretRef:
      name: letsencrypt-dev
    # Enable the HTTP-01 challenge provider
    solvers:
      - http01:
          ingress:
            class: nginx
---
# Ingress - ingress-dev
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-passthrough: 'false'
    cert-manager.io/issuer: 'letsencrypt-dev'
  generation: 2
  name: ingress-dev
  namespace: ${CICD_GIT_REPO_NAME}-dev
spec:
  rules:
    - host: ${CICD_GIT_REPO_NAME}-dev.binpar.cloud
      http:
        paths:
          - backend:
              serviceName: www-service-dev
              servicePort: 80
            path: /
  tls:
    - hosts:
        - ${CICD_GIT_REPO_NAME}-dev.binpar.cloud
      secretName: ${CICD_GIT_REPO_NAME}-cert-dev
---
# Deploy - www-deploy
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    run: www-dev
  name: www-deploy-dev
  namespace: ${CICD_GIT_REPO_NAME}-dev
spec:
  replicas: 1
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      run: www-dev
  template:
    metadata:
      labels:
        run: www-dev
    spec:
      imagePullSecrets:
        - name: pipeline-docker-registry
      containers:
        - image: ${CICD_IMAGE}:${CICD_EXECUTION_SEQUENCE}
          name: www-dev
          envFrom:
            - configMapRef:
                name: www-config-dev
          ports:
            - containerPort: 8043
          readinessProbe:
            httpGet:
              path: /healthcheck
              port: 8043
              scheme: HTTP
            failureThreshold: 2
            timeoutSeconds: 5
            periodSeconds: 60
          resources:
            requests:
              memory: '40Mi'
              cpu: '10m'
            limits:
              memory: '100Mi'
              cpu: '100m'